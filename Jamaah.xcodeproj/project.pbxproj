// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 77;
	objects = {

/* Begin PBXFileReference section */
		0D4EC00C2CA99AEF00C5898F /* Jamaah.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Jamaah.app; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFileSystemSynchronizedBuildFileExceptionSet section */
		0D48942F2CAD299F0068A053 /* Exceptions for "Jamaah" folder in "Jamaah" target */ = {
			isa = PBXFileSystemSynchronizedBuildFileExceptionSet;
			membershipExceptions = (
				Info.plist,
			);
			target = 0D4EC00B2CA99AEF00C5898F /* Jamaah */;
		};
/* End PBXFileSystemSynchronizedBuildFileExceptionSet section */

/* Begin PBXFileSystemSynchronizedRootGroup section */
		0D4EC00E2CA99AEF00C5898F /* Jamaah */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			exceptions = (
				0D48942F2CAD299F0068A053 /* Exceptions for "Jamaah" folder in "Jamaah" target */,
			);
			path = Jamaah;
			sourceTree = "<group>";
		};
/* End PBXFileSystemSynchronizedRootGroup section */

/* Begin PBXFrameworksBuildPhase section */
		0D4EC0092CA99AEF00C5898F /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		0D4EC0032CA99AEF00C5898F = {
			isa = PBXGroup;
			children = (
				0D4EC00E2CA99AEF00C5898F /* Jamaah */,
				0D4EC00D2CA99AEF00C5898F /* Products */,
			);
			sourceTree = "<group>";
		};
		0D4EC00D2CA99AEF00C5898F /* Products */ = {
			isa = PBXGroup;
			children = (
				0D4EC00C2CA99AEF00C5898F /* Jamaah.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		0D4EC00B2CA99AEF00C5898F /* Jamaah */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 0D4EC01A2CA99AF000C5898F /* Build configuration list for PBXNativeTarget "Jamaah" */;
			buildPhases = (
				0D4EC0082CA99AEF00C5898F /* Sources */,
				0D4EC0092CA99AEF00C5898F /* Frameworks */,
				0D4EC00A2CA99AEF00C5898F /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			fileSystemSynchronizedGroups = (
				0D4EC00E2CA99AEF00C5898F /* Jamaah */,
			);
			name = Jamaah;
			packageProductDependencies = (
			);
			productName = Jamaah;
			productReference = 0D4EC00C2CA99AEF00C5898F /* Jamaah.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		0D4EC0042CA99AEF00C5898F /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1600;
				LastUpgradeCheck = 1600;
				TargetAttributes = {
					0D4EC00B2CA99AEF00C5898F = {
						CreatedOnToolsVersion = 16.0;
					};
				};
			};
			buildConfigurationList = 0D4EC0072CA99AEF00C5898F /* Build configuration list for PBXProject "Jamaah" */;
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 0D4EC0032CA99AEF00C5898F;
			minimizedProjectReferenceProxies = 1;
			preferredProjectObjectVersion = 77;
			productRefGroup = 0D4EC00D2CA99AEF00C5898F /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				0D4EC00B2CA99AEF00C5898F /* Jamaah */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		0D4EC00A2CA99AEF00C5898F /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		0D4EC0082CA99AEF00C5898F /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		0D4EC0182CA99AF000C5898F /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 17.6;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		0D4EC0192CA99AF000C5898F /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 17.6;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		0D4EC01B2CA99AF000C5898F /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = YES;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"Jamaah/Preview Content\"";
				DEVELOPMENT_TEAM = XRTY2KQ3K2;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_FILE = Jamaah/Info.plist;
				INFOPLIST_KEY_CFBundleDisplayName = "جمعة";
				INFOPLIST_KEY_LSApplicationCategoryType = "";
				INFOPLIST_KEY_NSCameraUsageDescription = "We need access to the camera to record video!";
				INFOPLIST_KEY_NSMicrophoneUsageDescription = "We need access to the microphone to record video.\nimport AVFoundation\nimport Photos\n\nstruct ContentView: View {\n    @StateObject private var camera = CameraModel() // إنشاء نموذج الكاميرا\n\n    var body: some View {\n        VStack {\n            CameraPreview(camera: camera)\n                .onAppear {\n                    camera.checkPermissions() // تحقق من الأذونات عند ظهور الواجهة\n                }\n\n            HStack {\n                Button(action: {\n                    camera.startRecording() // بدء التسجيل\n                }) {\n                    Text(\"Start Recording\")\n                        .padding()\n                        .background(Color.red)\n                        .foregroundColor(.white)\n                        .cornerRadius(10)\n                }\n\n                Button(action: {\n                    camera.stopRecording() // إيقاف التسجيل\n                }) {\n                    Text(\"Stop Recording\")\n                        .padding()\n                        .background(Color.green)\n                        .foregroundColor(.white)\n                        .cornerRadius(10)\n                }\n            }\n        }\n    }\n}\n\nstruct CameraPreview: UIViewControllerRepresentable {\n    var camera: CameraModel // ربط نموذج الكاميرا\n\n    func makeUIViewController(context: Context) -> UIViewController {\n        return camera // إرجاع نموذج الكاميرا\n    }\n\n    func updateUIViewController(_ uiViewController: UIViewController, context: Context) { /* لا شيء هنا */ }\n}\n\nclass CameraModel: UIViewController, ObservableObject, AVCaptureFileOutputRecordingDelegate {\n    private var captureSession: AVCaptureSession? // جلسة التقاط الفيديو\n    private var videoOutput: AVCaptureMovieFileOutput? // مخرجات الفيديو\n    private var videoURL: URL? // رابط الفيديو\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCamera() // إعداد الكاميرا عند تحميل الواجهة\n    }\n\n    func checkPermissions() {\n        AVCaptureDevice.requestAccess(for: .video) { granted in\n            if granted {\n                DispatchQueue.main.async {\n                    self.setupCamera() // إعداد الكاميرا إذا تم منح الأذونات\n                }\n            }\n        }\n    }\n\n    private func setupCamera() {\n        captureSession = AVCaptureSession() // إنشاء جلسة جديدة للفيديو\n        guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else { return }\n\n        let videoInput: AVCaptureDeviceInput\n        do {\n            videoInput = try AVCaptureDeviceInput(device: videoCaptureDevice) // محاولة إنشاء مدخلات الفيديو\n        } catch {\n            return\n        }\n\n        if (captureSession?.canAddInput(videoInput) == true) {\n            captureSession?.addInput(videoInput)\n        } else {\n            return\n        }\n\n        videoOutput = AVCaptureMovieFileOutput() // إعداد مخرجات الفيديو\n        if let videoOutput = videoOutput, captureSession?.canAddOutput(videoOutput) == true {\n            captureSession?.addOutput(videoOutput) // إضافة مخرجات الفيديو إلى الجلسة\n        }\n\n        let previewLayer = AVCaptureVideoPreviewLayer(session: captureSession!)\n        previewLayer.frame = view.layer.bounds\n        previewLayer.videoGravity = .resizeAspectFill\n        view.layer.addSublayer(previewLayer) // إضافة الطبقة إلى الواجهة\n\n        DispatchQueue.global(qos: .userInitiated).async {\n            self.captureSession?.startRunning() // بدء تشغيل الجلسة على خيط خلفي\n        }\n    }\n\n    func startRecording() {\n        guard let videoOutput = videoOutput else { return }\n        videoURL = FileManager.default.temporaryDirectory.appendingPathComponent(\"video.mp4\") // تحديد مسار حفظ الفيديو مؤقتًا\n        videoOutput.startRecording(to: videoURL!, recordingDelegate: self) // بدء التسجيل\n    }\n\n    func stopRecording() {\n        videoOutput?.stopRecording() // إيقاف التسجيل\n    }\n\n    // دالة لحفظ الفيديو\n    func fileOutput(_ output: AVCaptureFileOutput, didFinishRecordingTo outputFileURL: URL, from connections: [AVCaptureConnection]) {\n        print(\"Finished recording to: \\(outputFileURL)\")\n        saveVideoToLibrary(url: outputFileURL) // حفظ الفيديو في المكتبة\n    }\n\n    // معالجة الأخطاء عند التسجيل\n    func fileOutput(_ output: AVCaptureFileOutput, didFinishRecordingTo outputFileURL: URL, from connections: [AVCaptureConnection], error: Error?) {\n        if let error = error {\n            print(\"Error recording video: \\(error.localizedDescription)\")\n        }\n    }\n\n    // حفظ الفيديو في مكتبة الصور\n    private func saveVideoToLibrary(url: URL) {\n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAssetFromVideo(atFileURL: url) // إنشاء طلب لحفظ الفيديو\n        }) { success, error in\n            if success {\n                print(\"Video saved successfully!\") // تأكيد الحفظ الناجح\n            } else {\n                print(\"Error saving video: \\(String(describing: error?.localizedDescription))\") // طباعة الخطأ إذا حدث\n            }\n        }\n    }\n}\n\n#Preview {\n    ContentView() // معاينة الواجهة الرئيسية\n}\n";
				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "We need access to the photo to safe video!";
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				IPHONEOS_DEPLOYMENT_TARGET = 17.6;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				ONLY_ACTIVE_ARCH = YES;
				PRODUCT_BUNDLE_IDENTIFIER = com.j.jamaah;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		0D4EC01C2CA99AF000C5898F /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = YES;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_ASSET_PATHS = "\"Jamaah/Preview Content\"";
				DEVELOPMENT_TEAM = XRTY2KQ3K2;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_FILE = Jamaah/Info.plist;
				INFOPLIST_KEY_CFBundleDisplayName = "جمعة";
				INFOPLIST_KEY_LSApplicationCategoryType = "";
				INFOPLIST_KEY_NSCameraUsageDescription = "We need access to the camera to record video!";
				INFOPLIST_KEY_NSMicrophoneUsageDescription = "We need access to the microphone to record video.\nimport AVFoundation\nimport Photos\n\nstruct ContentView: View {\n    @StateObject private var camera = CameraModel() // إنشاء نموذج الكاميرا\n\n    var body: some View {\n        VStack {\n            CameraPreview(camera: camera)\n                .onAppear {\n                    camera.checkPermissions() // تحقق من الأذونات عند ظهور الواجهة\n                }\n\n            HStack {\n                Button(action: {\n                    camera.startRecording() // بدء التسجيل\n                }) {\n                    Text(\"Start Recording\")\n                        .padding()\n                        .background(Color.red)\n                        .foregroundColor(.white)\n                        .cornerRadius(10)\n                }\n\n                Button(action: {\n                    camera.stopRecording() // إيقاف التسجيل\n                }) {\n                    Text(\"Stop Recording\")\n                        .padding()\n                        .background(Color.green)\n                        .foregroundColor(.white)\n                        .cornerRadius(10)\n                }\n            }\n        }\n    }\n}\n\nstruct CameraPreview: UIViewControllerRepresentable {\n    var camera: CameraModel // ربط نموذج الكاميرا\n\n    func makeUIViewController(context: Context) -> UIViewController {\n        return camera // إرجاع نموذج الكاميرا\n    }\n\n    func updateUIViewController(_ uiViewController: UIViewController, context: Context) { /* لا شيء هنا */ }\n}\n\nclass CameraModel: UIViewController, ObservableObject, AVCaptureFileOutputRecordingDelegate {\n    private var captureSession: AVCaptureSession? // جلسة التقاط الفيديو\n    private var videoOutput: AVCaptureMovieFileOutput? // مخرجات الفيديو\n    private var videoURL: URL? // رابط الفيديو\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCamera() // إعداد الكاميرا عند تحميل الواجهة\n    }\n\n    func checkPermissions() {\n        AVCaptureDevice.requestAccess(for: .video) { granted in\n            if granted {\n                DispatchQueue.main.async {\n                    self.setupCamera() // إعداد الكاميرا إذا تم منح الأذونات\n                }\n            }\n        }\n    }\n\n    private func setupCamera() {\n        captureSession = AVCaptureSession() // إنشاء جلسة جديدة للفيديو\n        guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else { return }\n\n        let videoInput: AVCaptureDeviceInput\n        do {\n            videoInput = try AVCaptureDeviceInput(device: videoCaptureDevice) // محاولة إنشاء مدخلات الفيديو\n        } catch {\n            return\n        }\n\n        if (captureSession?.canAddInput(videoInput) == true) {\n            captureSession?.addInput(videoInput)\n        } else {\n            return\n        }\n\n        videoOutput = AVCaptureMovieFileOutput() // إعداد مخرجات الفيديو\n        if let videoOutput = videoOutput, captureSession?.canAddOutput(videoOutput) == true {\n            captureSession?.addOutput(videoOutput) // إضافة مخرجات الفيديو إلى الجلسة\n        }\n\n        let previewLayer = AVCaptureVideoPreviewLayer(session: captureSession!)\n        previewLayer.frame = view.layer.bounds\n        previewLayer.videoGravity = .resizeAspectFill\n        view.layer.addSublayer(previewLayer) // إضافة الطبقة إلى الواجهة\n\n        DispatchQueue.global(qos: .userInitiated).async {\n            self.captureSession?.startRunning() // بدء تشغيل الجلسة على خيط خلفي\n        }\n    }\n\n    func startRecording() {\n        guard let videoOutput = videoOutput else { return }\n        videoURL = FileManager.default.temporaryDirectory.appendingPathComponent(\"video.mp4\") // تحديد مسار حفظ الفيديو مؤقتًا\n        videoOutput.startRecording(to: videoURL!, recordingDelegate: self) // بدء التسجيل\n    }\n\n    func stopRecording() {\n        videoOutput?.stopRecording() // إيقاف التسجيل\n    }\n\n    // دالة لحفظ الفيديو\n    func fileOutput(_ output: AVCaptureFileOutput, didFinishRecordingTo outputFileURL: URL, from connections: [AVCaptureConnection]) {\n        print(\"Finished recording to: \\(outputFileURL)\")\n        saveVideoToLibrary(url: outputFileURL) // حفظ الفيديو في المكتبة\n    }\n\n    // معالجة الأخطاء عند التسجيل\n    func fileOutput(_ output: AVCaptureFileOutput, didFinishRecordingTo outputFileURL: URL, from connections: [AVCaptureConnection], error: Error?) {\n        if let error = error {\n            print(\"Error recording video: \\(error.localizedDescription)\")\n        }\n    }\n\n    // حفظ الفيديو في مكتبة الصور\n    private func saveVideoToLibrary(url: URL) {\n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAssetFromVideo(atFileURL: url) // إنشاء طلب لحفظ الفيديو\n        }) { success, error in\n            if success {\n                print(\"Video saved successfully!\") // تأكيد الحفظ الناجح\n            } else {\n                print(\"Error saving video: \\(String(describing: error?.localizedDescription))\") // طباعة الخطأ إذا حدث\n            }\n        }\n    }\n}\n\n#Preview {\n    ContentView() // معاينة الواجهة الرئيسية\n}\n";
				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "We need access to the photo to safe video!";
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				IPHONEOS_DEPLOYMENT_TARGET = 17.6;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				ONLY_ACTIVE_ARCH = YES;
				PRODUCT_BUNDLE_IDENTIFIER = com.j.jamaah;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		0D4EC0072CA99AEF00C5898F /* Build configuration list for PBXProject "Jamaah" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				0D4EC0182CA99AF000C5898F /* Debug */,
				0D4EC0192CA99AF000C5898F /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		0D4EC01A2CA99AF000C5898F /* Build configuration list for PBXNativeTarget "Jamaah" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				0D4EC01B2CA99AF000C5898F /* Debug */,
				0D4EC01C2CA99AF000C5898F /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 0D4EC0042CA99AEF00C5898F /* Project object */;
}
